/// <reference lib="webworker" />

// https://developers.google.com/web/tools/workbox/modules
import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import * as navigationPreload from "workbox-navigation-preload";
import {
  /* createHandlerBoundToURL, */ precacheAndRoute,
} from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

// Give the service worker access to Firebase Messaging.
importScripts(
  "https://www.gstatic.com/firebasejs/9.2.0/firebase-app-compat.js"
);
importScripts(
  "https://www.gstatic.com/firebasejs/9.2.0/firebase-messaging-compat.js"
);

declare const self: ServiceWorkerGlobalScope;

declare const firebase: {
  initializeApp: (config: {
    apiKey: string;
    appId: string;
    authDomain: string;
    measurementId: string;
    messagingSenderId: string;
    projectId: string;
    storageBucket: string;
  }) => void;
  messaging: () => {
    onBackgroundMessage: (
      handler: (payload: {
        collapseKey: string;
        data?: Record<string, string>;
        fcmOptions?: { analyticsLabel?: string; link?: string };
        from: string;
        notification?: { body?: string; image?: string; title?: string };
      }) => void
    ) => () => void;
  };
};

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching.
// https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

/* REPLACED FOR A BETTER VERSION BELOW

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell.
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);
*/

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event: { data?: { type?: string } }) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    void self.skipWaiting();
  }
});

/*
 * === FIREBASE CLOUD MESSAGING ===
 */

// Initialize the Firebase app in the service worker by passing in
// your app's Firebase config object.
// https://firebase.google.com/docs/web/setup#config-object
firebase.initializeApp({
  apiKey: "AIzaSyAynKF5joA-_wpax9jzatonSZgxSE-MaRQ",
  appId: "1:810900069450:web:0f69447751bb45cac59ab3",
  authDomain: "nova-a3-ind.firebaseapp.com",
  measurementId: "G-PXKR7KDTEP",
  messagingSenderId: "810900069450",
  projectId: "nova-a3-ind",
  storageBucket: "nova-a3-ind.appspot.com",
});

// Retrieve an instance of Firebase Messaging so that it can handle background
// messages.
const messaging = firebase.messaging();

// https://firebase.google.com/docs/cloud-messaging/concept-options
messaging.onBackgroundMessage(function (payload) {
  console.info("[SW-FCM] onBackgroundMessage", payload);

  const title = payload.notification?.title || "Nova A3";
  const options = {
    body:
      payload.notification?.body ||
      "VocÃª tem uma nova mensagem. Abra o app para ver.",
    icon: payload.notification?.image,
  };

  void self.registration.showNotification(title, options);
});

/*
 * === PWA BUILDER'S OFFLINE PAGE + OFFLINE COPY OF PAGES ===
 */

const CACHE = "pwabuilder-offline-page";

// TODO: replace the following with the correct offline fallback page i.e.: const offlineFallbackPage = "offline.html";
const offlineFallbackPage = "ToDo-replace-this-name.html";

self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE).then((cache) => cache.add(offlineFallbackPage))
  );
});

if (navigationPreload.isSupported()) {
  navigationPreload.enable();
}

registerRoute(new RegExp("/*"), new StaleWhileRevalidate({ cacheName: CACHE }));

self.addEventListener(
  "fetch",
  (event: FetchEvent & { preloadResponse?: Promise<Response> }) => {
    if (event.request.mode === "navigate") {
      event.respondWith(
        (async (): Promise<Response> => {
          try {
            const preloadResp = await event.preloadResponse;

            if (preloadResp) {
              return preloadResp;
            }

            const networkResp = await fetch(event.request);
            return networkResp;
          } catch (error) {
            const cache = await caches.open(CACHE);
            const cachedResp = await cache.match(offlineFallbackPage);
            return cachedResp as Response;
          }
        })()
      );
    }
  }
);
